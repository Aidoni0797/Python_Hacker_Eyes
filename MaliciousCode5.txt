Используем WMI

Мониторинг событий файловой системы с использованием WMI похож на ранее рассмотренное 
отслеживание событий с процессами. Для того чтобы следить за изменениями конкретного файла, 
воспользуемся следующим кодом:

import wmi

notify_filter = 'creation'

#Наблюдатель за изменениями в файле
file_watcher = wmi.WMI().CIM_DataFile.watch_for(
	notify_filter, Drive = 'e:', Path = r'\\example_dir\\\', FileName = 'example_file',
	Extension = 'txt'
)

while True:
	#Выводим информацию о событии с файлом
	new_file = file_watcher()
	print(new_file.timestamp)
	print(new_file.event_type)

Здесь видно, что помимо параметра notify_filter передаются еще параметры, определяющие файл,
события которого необходимо отслеживать. Обрати внимание на особенность написания параметра
Path с модификатором r (он нужен для того, чтобы получить требуемое количество слешей-разделителей
в строке).

Для отслеживания изменений в каталоге, а не в файле вместо класса CIM_DataFile необходимо
использовать класс CIM_Directory (более подробно о работе с файловой системой с помощью
WMI можно почитать здесь: https://www.script-coding.com/WMI-FileSystem.html)

directory_watcher = wmi.WMI().CIM_Directory.watch_for(
	notify_filter, Drive = 'e:', Path = r'\\example_dir\\\'
)

Конечно, все это желательно оформить в виде класса-наследника нашего базового класса
FileMonitor, описанного выше, чтобы мониторинг событий файловой системы можно быть запустить 
в отдельном потоке. В целом полную реализацию описанных классов по мониторингу файловой
системы можно посмотреть на моем гитхабе (к iDONi отношение не имеет)
(https://github.com/drobotun/pywinwatcher/blob/main/pywinwatcher/filemon.py)