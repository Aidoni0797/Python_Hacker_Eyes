Многие вредоносные программы сопротивляются отладке: ониотслеживают и блокируют запуск
популярных утилит для мониторинга файловой системы, процессов и и зменений в реестре Windows.
Чтобы обхитрить такую малварь, мы напишем на Python собственный инструмент для исследования 
образцов вредоносных программ.
Статический анализ, как ты знаешь, подразумевает исследование исполняемого файла без его запуска.
Динамический кда увлекательнее: в этом случае образец запускают и отслеживают все происходящие
при этом в системе события. Для исследователя интереснее всего операции с файловыми
объектами, с реестром, а так-же все случаи создания и уничтожения процессов. Для получения
более полной картины неплохо было бы отслеживать вызовы API-функций анализируемой программой.
Размеется, экспериментировать с вредоносом нужно в изолированной среде с использованием
сиртуальной машины или песочницы - иначе он может натворить бед.
Для отслеживания жизнедеятельности приложений существует целый арсенал готовых средств, среди
которых самое исвестное - утилита Process Monitor from Systernals Suite 
(https://docs.microsoft.com/en-us/sysinternals/downloads/sysinternals-suite).
Эта тулза в рекламе не нуждается, она неплохо документирована и пользуется заслуженной
популярностью. Process Monitor способен отслеживать все изменения в файловой системе Windows,
мониторить операции создания и ничтожения процессов и потоков, регистрировать и отображать
происходящее в реестре, а также фиксировать операции загрзки DDL-библиотек и драйверов устройств.
Отслеживать вызовы API-функций можно с помощью утилиты API Monitor (http://www.rohitab.com/apimonitor)
французской компаний Rohitab (http://rohitab.com). Туториал по работе с этой тулзой можно
найти на сайте программы (http://www.rohitab.com/category/api-monitor-tutorials), правда,
на английском языке.
Самый главный недостаток этих утилит (как, впрочем, и других широко распространенных программ
такого рода) именно в их популярности. Потому что с ними отлично знакомы не только аналитки,
но и вирусописатели. Далеко не любая малварь позволит использовать подобные инструменты и
безнаказанно исследовать свое поведение в системе. Наиболее продвинутые трояны фиксируют
любые попытки запуска антивирусов и средств анализа состояния ОС, а затем либо пытаются
всеми правдами и неправдами прибить соответствующий процесс, либо прекращают активные действия
до лучших времен.
Тем не менее существуют способы перехитрить малварь. Один из наиболее очевидных - изобрести
собственный инструмент, который будет иметь (хотя бы частично) то же самое, что делают Process
Monitor, API Monitor и им подобные программы. Чем мы, благославясь, и займемся.
Для работы мы будем использовать Python (не зря же он считается одним из самых хакерских
языков программирования). Отслеживать интересующие нас события, связанные с реестром, файловой
системой или процессами, можно двумя путями: используя специализированные API-функции 
Windows и при помощи механизмов WMI (https://docs.microsoft.com/ru-ru/windows/win32/wmisdk/
wmi-start-page, Windows Managment Instrumentation, или инстрментарий управления Windows).
То есть помимо Python нам понадобятся модуль pywin32 (https://pypi.org/project/pywin32) 
and module WMI (https://pypi.org/project/WMI). Установить их очень просто (на самом деле
достаточно поставить только пакет WMI, а он уже самостоятельно подгрузит pywin32).

pip install pywin32
pip install wmi

Чтобы отследить вызовы API-функций, понадобится модуль WinAppDbg (https://pypi.org/project/
winappdbg). Этот модуль работает только со второй версией Python (если говорить точнее,
то потребется 2.5, 2.6, 2.7), поэтому старый Python рано окончательно списывать с утиль.
Тем более что автор WinAppDbg пока не планирует переписывать модуль под третью версию
в связи с необходимостью рефакторинга большого объема кода, о чем прямо говорит в документации.
Установить модуль можно через pip.

pip install winappdbg

Скачав и установив все необходимые модули, приступим к таинству написания собственного
инструмента для динамического анализа малвари.

