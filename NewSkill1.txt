По примеру американских коллег из Apple, Amazon, Google and Microsoft в Яндексе в 2017 году
сделали своего голосового ассистента, который понимает русский язык и пользуется неплохой
популярностью в России. Одна из причин успеха - это возможность создания своих навыков, т.е.
собственных приложений. О том, как научить Алису новым вещам, используя Python and web-framework
Flask, мы поговорим в этой главе.
Как вообще работают навыки? Если говорить простыми словами, то Алиса и твой сервер будут 
обмениваться файлами в формате JSON, где будет содержаться необходимая информация. Причем на 
сервер придет не просто распознанный текст, но уже подготовленный для обработки запрос.
Ты можешь выбрать любой удобный язык программирования - нужна только возможность создавать
на нем веб-сервер. Мы выберем Python как один из самых простых и популярных.
Чтобы все примеры исходного кода, приведенные в главе, успешно запускались, тебе понадобится
установить:
Python 3.6 или новее
Flask 1.0.2 или новее

Первый навык - эхо-бот
Навык Алисы - это, по сути, чат-бот. А разработчики чат-ботов для теста обычно первым делом 
пробуют написать эхо-бота, который отправляет тебе то же самое, когда ты ему что-то пишешь.
Для наачала основные термины:
request - запрос, который поступил от Алисы
response - ответ нашего сервера, который отправляется Алисе
Как будет работать наш навык? На наш сервер поступает request, мы будем получать из него
содержимое в виде текста, а затем отправлять response, где в качестве содержимого укажем
текст запроса. Переходим к коду!
from flask import Flask
from flask import request
import json

app = Flask(__name__)

@app.route('/post', methods=['POST'])
def main():
	##Создаем ответ
	response = {
		'session': request.json['session'],
		'version': request.json['version'],
		'response':{
			'end_session': False
		}
	}
	## Заполняем необходимую информацию
	handle_dialog(response, request.json)
	return json.dumps(response)

def handle_dialog(res, req):
	if req['request']['original_utterance']:
		##Проверяем, есть ли содержимое
		res['response']['text'] = req['request']['original_utterance']
	else:
		## Если это первое сообщение - представляемся
		res['response']['text'] = "Я echo-bot, повторяю за тобой"

if __name__ == '__main__':
	app.run()

Как-то много кода. Давай разбираться по частям. Во-первых, важно сказать, что наш сервер
написан на Flask, и если ты хочешь разобраться в этом фреймворке поглубже, на "Хабрахабре"
есть отличный гайд: https://habr.com/ru/post/346306/. Здесь же отметим пару основных вещей.

- Важно не забыть импортировать модули: Flask отвечает непосредственно за работу
веб-приложения, request - за работу с запросами, а json необходим, потому что мы и получаем,
и отправляем файлы JSON,  не объекты из Python.

- Нужно создать экземпляр класса Flask, а затем его запустить. Это и есть непосредстввенно 
ядро сервера.

- Декоратор app.route необходим, чтобы связать RL, тип запроса и функцию, которая будет
обрабатывать этот запрос.

С основами Flask покончено - в принципе, для разработки простых навыков нам ничего больше
не потребуется. Давай разберем, что же происходит в наших двух функциях.

В main() мы сначала создаем шаблон для ответа. Обрати внимание, что мы передаем туда два
параметра из запроса: session and version, а затем во вторую функцию передаем наш шаблон
для ответа и запрос, сконвертированный в JSON.

Основная функциональность нашего навыка содержится в функции handle_dialog(res, req). Если
нам пришло какое-то сообщение, то все просто: нужно получить содержимое запроса. Кстати,
оригинальный текст запроса содержится внутри req['request']['original_utterance'].
Чтобы отправить его обратно пользователю, нужно скопировать содержимое в res['response']['text']

Когда пользователь подключается к навыку в первый раз, запрос тоже происходит, но никакого
текста в нем нет. Для обработки этой ситуации я добавил в функцию проверку.

Вроде бы все? Теперь нужно проверить, работает наш пример или мы где-то ошиблись.
Нокак протестировать?

		
