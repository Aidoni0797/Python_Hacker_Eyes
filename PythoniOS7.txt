Импорт друзей из ВК в записную книжку

Наконец, самый сложный и длинный скрипт - импорт номеров телефонов из "ВКонтакте" 
в записную книжку. Как и  всех остальных, у "ВКонтакте" есть API. Для питона существует
несколько библиотек для работы с ним. Самая известная и самая простая в использовании -
библиотека со скромным именем vk.

import vk, datetime, contacts

#Функция для конфертации даты из формата ВК в формат iOS

def conveertdate(date):
date = dat.split('.')
if len(date) == 2:
	return datetim.datetime.combine(datetime.date(1604, int(date[1]), int(date[0])),
								datetime.time(0,0))
else:
	return datetime.datetime.combine(datetime.date(int(date[2]), int(date[1]),
						int(date[0])), datetime.time(0,0))

#Подключаемся в ВК и получаем список друзей
vkapi = vk.API('ID-приложения', 'логин', 'пароль')
a = vkapi.friends.get(filds = 'contacts.bdate')
a = a['items']

#Переходим по списку полученных контактов и импортируем их по одному
for i in a:
Temp = contacs.Person()
Temp.last_name = i['last_name']
Temp.first_name = i['first_name']
if 'mobile_phone' in i.keys():
	try:
		Temp.phone.append(('home', i['home_phone']))
	except:
		pass
Temp.url = [('vk', 'http://vk.com/id'+str(i['id']))]
if 'bdate' in i.keys():
	Temp.birthday = convertdate(i['bdate'])
contacts.add_person(Temp)

#Сохраняем контакты
contacts.save()

Как и в случае с Твитерром, для скрипта необходимо создать приложение внутри Вконтакте.
Чтобы сделать это, перейди на вкладку Приложения на сайте ВК, потом на вкладку Управление и
нажми на кнопку Создать приложение. На странице приложения перейди на вкладку Настройки и 
скопируй ID Приложения. Вставь ID Приложения, Логин и Пароль в скрипт.

Разберемся, как работает этот скрипт. Сначала мы полчаем список друзей. По умолчанию функция
friend.get() возвращает словарь, состоящий из двух полей: count и items. Нас, несомненно,
интересует второе, но т.к. мы хотим получить не только имена и фамилии, то передадим функции
параметр fields, указывающий на то, что мы хотим узнать. Далее мы идем по списку словарей,
где каждый словарь - это пользователь. При каждой итерации мы создаем переменную Temp
типа Person и по очереди добавляем в нее поля.

В процессе прохода по контактам скрипт решает несколько проблем. Первая проблема возникает при
экспорте телефонных номеров, ведь очень часто мы встречаем в ВК номера типа кому надо - знают,
секрет и подобные. Чтобы скрипт смог обработать подобные записи, не падая, используется
оператор try. Вторая проблема возникла с несовпадением формата даты рождения. В полученном из ВК
словаре она записана в виде строки формата DD.MM.YYYY, а в поле birthday необходимо 
заносить данные в формате datetime.datetime. Для этого и нужна функция converdat в начале
скрипта. Кроме того, дата рождения может быть не указан вовсе.

Заключение

Несмотря на большое число примеров, мы рассмотрели далеко не все возможности Pythonista.
А ведь ее функционала хватает на очень многое. Например, в App Store уже выложено несколько
приложений, созданных в этой программе.
Встроенные библиотеки Pythonista:

canvas - библиотека вектроной графики;
clipboard - работа с буфером обмена;
console - функции, связанные с вводом и выводом текста;
contacts - доступ к записной книжке;
editor - работа с текстовым редактором Pythonista;
keychain - доступ к API Keychain;
linguistictagger - лингвистический анализ;
location - геолокационные сервисы;
motion - снятие показаний сенсора;
notification -работа с уведомлениями;
photos - работа с сохраненными фотографиями;
scene - 2D-графика и анимация;
sound - библиотека звуков;
spech - конвертация текста в речь;
ui - нативный GUI для iOS