Тотальная проверка. Используем API VirusTotal в своих проектах.
Ты наверняка не раз пользовался услугами сайта VirusTotal (нет iDONi его впервые слышет)
(https://www.virustotal.com), чтобы  проверить, не содержат ли бинарники вредоносных функций,
либо протестировать собственные наработки. У этого сервиса есть бесплатный API, работу с
которым на Python мы и разберем в этой главе.
Чтобы пользоваться программными интерфейсами VirusTotal без ограничений, нужно получить ключь,
который обходится в серьезную сумму - цены начинаются с 700 евро в месяц. Причем частному лицу, 
даже при готовности платить, ключ не дадут.
(у iDONi нет средств откуда найти будет, есть ли смысл продолжать)

Однако отчаиваться не стоит, поскольку основные функции сервис предоставляет бесплатно
(как же любить это слово iDONi) и ограничивает нас лишь по числу запросов - не более
двух в минуту. Что ж, придется с этим мириться.

API VirusTotal нельзя использовать в коммерческих продуктах или услугах и в проектах,
которые могут нанести прямой либо косвенный ущерб антивирусной индустрии.

Получаем APIKey

Итак, первым делом нам нужна регистрация на сайте. Тут проблем никаких - я уверен, что ты
справишься. После регистрации берем ключ доступа, перейдя в пункт меню API key.

Версии API
На момент написания этих строк актуальная версия API имеет номер 2 (https://www.virustotal.com/
en/documentation/public-api/). Но при этом уже существует и новый вариант - номер 3
(https://developers.virustotal.com/v3.0/reference#overview). Эта версия API пока еще
находится в стадии беты, но ее уже вполне можно использовать, тем более что возможности,
которые она предоставляет, гораздо шире.
Разработчики пока что рекомендуют применять третью версию только для экспериментов либо для
некритичных проектов. Мы же разберем обе версии. Ключ доступа для них одинаков.

API VirusTotal. Версия 2.
Как и в случае с другими популярными веб-сервисами, работа с API заключается в пересылке 
запросов по HTTP и получении ответов.
API второй версии позволяет:
- отправлять файл на проверку;
- получать отчет по проверенным ранее файлам, с использованием идентификатора файла 
(SHA-256, SHA-1 or MD5-хеш файла либо значение scan_id из ответа, полученного после отправки
файла)
- отправлять URL для скнирования на сервер;
- получать отчет по проверенным ранее адресам с использованием либо непосредственно URL,
либо значения scan_id из ответа, полченного после отправки URL на сервер;
- получать отчет по IP-адресу;
- получать отчет по доменному имени№

Ошибки
Если запрос был правильно обработан и ошибок не возникло, будет возвращен код 200 (ОК).
Если же произошла ошибка, то могут быть такие варианты:
- 204 - ошибка типа Request rate limit exceeded. Возникает, когда превышена квота допустимого
количества запросов (для бесплатного ключа квота составляет два запроса в минуту);
- 400 - ошибка типа Bad request. Возникает, когда некорректно сформирован запрос, например
если нет нужных аргументов или у них недопустимые значения;
- 403 - ошибка типа Forbidden. Возникает, если пытаться использовать функции API,
доступные только с платным ключом, когда его нет.

При правильном формировании запроса (код состояния HTTP - 200) ответ будет представлять
собой объект JSON (https://ru.wikipedia.org/wiki/JSON), в теле которого присутствуют
как минимум два поля:

- response_code - если запрашиваемый объект (файл, URL, IP-адрес или имя домена) есть в базе
VirusTotal (т.е. проверялся раньше) и информация об этом объекте может быть получена,
то значение этого поля будет равно единице; если запрашиваемый объект находится в очереди
на анализ, значение поля будет -2; если запрашиваемый объект отсутствует в базе VirusTotal - 
равно нулю;

- verbose_msg предоставляет более подробное описание значения response_code (например,
Scan finished, information embedded после отправки файла на сканирование).

Остальная информация, содержащаяся в ответном объекте JSON, зависит от того, какая функция
API была использована.(129 стр)